const config = {
  // Bot所有者のユーザーID。既定で権限レベル10。Bot所有者以外のユーザーIDは絶対に指定しないこと。
  "ownerID": "1234567890",

  // Bot管理者のユーザーID配列（型: string）。既定で権限レベル9。
  "admins": [],

  // BotサポートのユーザーID配列（型: string）。既定で権限レベル8。
  "support": [],

  // Botのトークン。 https://discordapp.com/developers/applications/me で調べる。
  "token": "<Your Token>",
  
  "logServer": "425276838223544331",

  // サーバーごとに作られる設定のデフォルト設定。新しいGuild（サーバー）の設定はここで指定したものになる。
  // コマンドによる設定変更が出来なくなるため、空白は指定しないこと。
  "defaultSettings" : {
    "prefix": "hor!",
    "modLogChannel": "ld_log",
    "frontdeskChannelID": "<Front Desk Channel ID>",
    "modRole": "客室係",
    "adminRole": "オーナー",
    "systemNotice": "true", // trueのとき、権限のないユーザーがコマンドを実行しようとしたときに、エラーメッセージをGuildに送る。
    //'initializedRoles': "false",
  },

  // 権限レベルの定義
  permLevels: [
    // 最低権限レベル。役割が設定されていないユーザーのためのもの。
    { level: 0,
     name: "一般宿泊客", 
     // チェック処理は無し。一般宿泊者が実行可能なコマンドは全て実行できるようにする。
     check: () => true
    },

    // Botを管理するユーザーは、他の役職より高い役割
    { level: 2,
     // 役割の名前
     name: "客室係",
     // 以下の処理では、まずメッセージが送信されたGuildの役割をチェックする。
     // 次に、メッセージの送信者にmodRoleの役割が設定されているかどうかをチェックする。
     // もしそうならtrueを返す（コマンド実行許可）。そうでなければfalseを返す（コマンド実行不許可）。
     check: (message) => {
       try {
         const modRole = message.guild.roles.find(r => r.name.toLowerCase() === message.settings.modRole.toLowerCase());
         if(modRole && message.member.roles.has(modRole.id)) return true;
       } catch (e) {
         return false;
       }
     }
    },

    { level: 3,
     name: "オーナー", 
     check: (message) => {
       try {
         const adminRole = message.guild.roles.find(r => r.name.toLowerCase() === message.settings.adminRole.toLowerCase());
         return (adminRole && message.member.roles.has(adminRole.id));
       } catch (e) {
         return false;
       }
     }
    },

    // サーバー所有者
    { level: 4,
     name: "サーバー所有者", 
     // 単純に、Guild所有者のユーザーIDとメッセージ送信者のユーザーIDが一致するかどうか調べ、
     // 一致すればtrueを、一致しなければfalseを返す。
     check: (message) => message.channel.type === "text" ? (message.guild.owner.user.id === message.author.id ? true : false) : false
    },

    // Botサポートは、Bot所有者の代理としてトラブルシューティングを補助するために、
    // 参加しているサーバーにおいてサーバー所有者と同等のBot操作権限を与えられた、特別な中間レベル。
    { level: 97,
     name: "Botサポート",
     // メッセージ送信者のIDが、この設定ファイルで指定した配列に含まれているかをチェックする。
     // そのため、Botサポートの追加時にはBotを再起動する必要がある。!
     check: (message) => config.support.includes(message.author.id)
    },

    // Bot管理者は、Botの再起動やコマンドの再読込などの特別なコマンドを実行できる。
    { level: 98,
     name: "Bot管理者",
     check: (message) => config.admins.includes(message.author.id)
    },

    // Bot所有者。evalやexecなどの危険なコマンドが実行できるため、最高の権限レベルを与えるべき。
    { level: 99,
     name: "Bot所有者", 
     // 単純に、メッセージ送信者のユーザーIDがこの設定ファイルで指定されたIDに一致するかどうかを調べる。
     check: (message) => message.client.config.ownerID === message.author.id
    }
  ]
};

module.exports = config;
